CNTK 2.0rc2 (HEAD f19045, Apr 21 2017 07:25:22) on tg031 at 2017/05/21 10:41:56

cntk/cntk/bin/cntk  configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConRegResNet34.cntk
CNTK 2.0rc2 (HEAD f19045, Apr 21 2017 07:25:22) on tg031 at 2017/05/21 10:41:56

cntk/cntk/bin/cntk  configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConRegResNet34.cntk
CNTK 2.0rc2 (HEAD f19045, Apr 21 2017 07:25:22) on tg031 at 2017/05/21 10:41:56

cntk/cntk/bin/cntk  configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConRegResNet34.cntk
CNTK 2.0rc2 (HEAD f19045, Apr 21 2017 07:25:22) on tg031 at 2017/05/21 10:41:56

cntk/cntk/bin/cntk  configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConRegResNet34.cntk
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (2) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (0) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (1) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (3) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConRegResNet34.cntk:command=Train
configparameters: 4dConRegResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConRegResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConRegResNet34.cntk:deviceId=auto
configparameters: 4dConRegResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 16
evalNodeNames = errs:top5Errs  
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConRegResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg
configparameters: 4dConRegResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/OutputRegResNet
configparameters: 4dConRegResNet34.cntk:parallelTrain=true
configparameters: 4dConRegResNet34.cntk:precision=float
configparameters: 4dConRegResNet34.cntk:profilerEnabled=true
configparameters: 4dConRegResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConRegResNet34.cntk:traceLevel=1
configparameters: 4dConRegResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            MaxPoolingLayer {(3:3:3:3), stride = (1:1:1:2), pad = true} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:2), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 256
        maxEpochs = 125
        learningRatesPerMB = 1*30: 0.1*30: 0.01*30: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################


Starting from checkpoint. Loading network from '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.18'.
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8001 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConRegResNet34.cntk:command=Train
configparameters: 4dConRegResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConRegResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConRegResNet34.cntk:deviceId=auto
configparameters: 4dConRegResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 16
evalNodeNames = errs:top5Errs  
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConRegResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg
configparameters: 4dConRegResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/OutputRegResNet
configparameters: 4dConRegResNet34.cntk:parallelTrain=true
configparameters: 4dConRegResNet34.cntk:precision=float
configparameters: 4dConRegResNet34.cntk:profilerEnabled=true
configparameters: 4dConRegResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConRegResNet34.cntk:traceLevel=1
configparameters: 4dConRegResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            MaxPoolingLayer {(3:3:3:3), stride = (1:1:1:2), pad = true} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:2), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 256
        maxEpochs = 125
        learningRatesPerMB = 1*30: 0.1*30: 0.01*30: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################

LockDevice: Failed to lock GPU 0 for exclusive use.

Starting from checkpoint. Loading network from '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.18'.
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7997 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7999 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConRegResNet34.cntk:command=Train
configparameters: 4dConRegResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConRegResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConRegResNet34.cntk:deviceId=auto
configparameters: 4dConRegResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 16
evalNodeNames = errs:top5Errs  
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConRegResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg
configparameters: 4dConRegResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/OutputRegResNet
configparameters: 4dConRegResNet34.cntk:parallelTrain=true
configparameters: 4dConRegResNet34.cntk:precision=float
configparameters: 4dConRegResNet34.cntk:profilerEnabled=true
configparameters: 4dConRegResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConRegResNet34.cntk:traceLevel=1
configparameters: 4dConRegResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            MaxPoolingLayer {(3:3:3:3), stride = (1:1:1:2), pad = true} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:2), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 256
        maxEpochs = 125
        learningRatesPerMB = 1*30: 0.1*30: 0.01*30: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################

LockDevice: Failed to lock GPU 0 for exclusive use.
LockDevice: Failed to lock GPU 1 for exclusive use.

Starting from checkpoint. Loading network from '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.18'.
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7973 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7975 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7985 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConRegResNet34.cntk:command=Train
configparameters: 4dConRegResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConRegResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConRegResNet34.cntk:deviceId=auto
configparameters: 4dConRegResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 16
evalNodeNames = errs:top5Errs  
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConRegResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg
configparameters: 4dConRegResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/OutputRegResNet
configparameters: 4dConRegResNet34.cntk:parallelTrain=true
configparameters: 4dConRegResNet34.cntk:precision=float
configparameters: 4dConRegResNet34.cntk:profilerEnabled=true
configparameters: 4dConRegResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConRegResNet34.cntk:traceLevel=1
configparameters: 4dConRegResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            MaxPoolingLayer {(3:3:3:3), stride = (1:1:1:2), pad = true} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:2), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 256
        maxEpochs = 125
        learningRatesPerMB = 1*30: 0.1*30: 0.01*30: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TestData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################

LockDevice: Failed to lock GPU 1 for exclusive use.
LockDevice: Failed to lock GPU 2 for exclusive use.
LockDevice: Failed to lock GPU 0 for exclusive use.

Starting from checkpoint. Loading network from '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.18'.
z.x.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 2 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.x.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 2 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 2 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 2 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 11 x 11 x 18 x 25 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 25 x 8, Output: 6 x 6 x 9 x 13 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 6 x 6 x 9 x 13 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 13 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 2 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.

Model has 349 nodes. Using GPU 3.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError

Model has 349 nodes. Using GPU 1.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError

Model has 349 nodes. Using GPU 2.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError

Model has 349 nodes. Using GPU 0.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError

Training 2975322 parameters in 110 out of 110 parameter tensors and 236 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]

Training 2975322 parameters in 110 	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
out of 110 parameter tensors and 236 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[10].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[10].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]

Training 2975322 parameters in 110 	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[10].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[10].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]

	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
out of 110 parameter tensors and 236 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
Training 2975322 parameters in 110 out of 110 parameter tensors and 236 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]

Initializing dataParallelSGD with FP32 aggregation.
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[10].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[10].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'model.arrayOfFunctions[10].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[10].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]

Initializing dataParallelSGD with FP32 aggregation.
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
No PreCompute nodes found, or all already computed. Skipping pre-computation step.
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]

Initializing dataParallelSGD with FP32 aggregation.
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]

Initializing dataParallelSGD with FP32 aggregation.
No PreCompute nodes found, or all already computed. Skipping pre-computation step.
No PreCompute nodes found, or all already computed. Skipping pre-computation step.
No PreCompute nodes found, or all already computed. Skipping pre-computation step.

Starting Epoch 19: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 19: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 19: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 19: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[19 of 125]: [Training] ce = 0.22133215 * 32258; errs = 9.870% * 32258; totalSamplesSeen = 612902; learningRatePerSample = 0.00390625; epochTime=4801.3s
Finished Epoch[19 of 125]: [Training] ce = 0.22133215 * 32258; errs = 9.870% * 32258; totalSamplesSeen = 612902; learningRatePerSample = 0.00390625; epochTime=4801.3s
Finished Epoch[19 of 125]: [Training] ce = 0.22133215 * 32258; errs = 9.870% * 32258; totalSamplesSeen = 612902; learningRatePerSample = 0.00390625; epochTime=4801.3s
Finished Epoch[19 of 125]: [Training] ce = 0.22133215 * 32258; errs = 9.870% * 32258; totalSamplesSeen = 612902; learningRatePerSample = 0.00390625; epochTime=4801.3s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.19'

Starting Epoch 20: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 20: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 20: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 20: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[20 of 125]: [Training] ce = 0.21855324 * 32258; errs = 9.632% * 32258; totalSamplesSeen = 645160; learningRatePerSample = 0.00390625; epochTime=4749.32s
Finished Epoch[20 of 125]: [Training] ce = 0.21855324 * 32258; errs = 9.632% * 32258; totalSamplesSeen = 645160; learningRatePerSample = 0.00390625; epochTime=4749.32s
Finished Epoch[20 of 125]: [Training] ce = 0.21855324 * 32258; errs = 9.632% * 32258; totalSamplesSeen = 645160; learningRatePerSample = 0.00390625; epochTime=4749.32s
Finished Epoch[20 of 125]: [Training] ce = 0.21855324 * 32258; errs = 9.632% * 32258; totalSamplesSeen = 645160; learningRatePerSample = 0.00390625; epochTime=4749.32s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.20'

Starting Epoch 21: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 21: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 21: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 21: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[21 of 125]: [Training] ce = 0.20581704 * 32258; errs = 9.176% * 32258; totalSamplesSeen = 677418; learningRatePerSample = 0.00390625; epochTime=4860.28s
Finished Epoch[21 of 125]: [Training] ce = 0.20581704 * 32258; errs = 9.176% * 32258; totalSamplesSeen = 677418; learningRatePerSample = 0.00390625; epochTime=4860.28s
Finished Epoch[21 of 125]: [Training] ce = 0.20581704 * 32258; errs = 9.176% * 32258; totalSamplesSeen = 677418; learningRatePerSample = 0.00390625; epochTime=4860.28s
Finished Epoch[21 of 125]: [Training] ce = 0.20581704 * 32258; errs = 9.176% * 32258; totalSamplesSeen = 677418; learningRatePerSample = 0.00390625; epochTime=4860.28s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.21'

Starting Epoch 22: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 22: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 22: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 22: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[22 of 125]: [Training] ce = 0.20804435 * 32258; errs = 9.123% * 32258; totalSamplesSeen = 709676; learningRatePerSample = 0.00390625; epochTime=4797.25s
Finished Epoch[22 of 125]: [Training] ce = 0.20804435 * 32258; errs = 9.123% * 32258; totalSamplesSeen = 709676; learningRatePerSample = 0.00390625; epochTime=4797.25s
Finished Epoch[22 of 125]: [Training] ce = 0.20804435 * 32258; errs = 9.123% * 32258; totalSamplesSeen = 709676; learningRatePerSample = 0.00390625; epochTime=4797.25s
Finished Epoch[22 of 125]: [Training] ce = 0.20804435 * 32258; errs = 9.123% * 32258; totalSamplesSeen = 709676; learningRatePerSample = 0.00390625; epochTime=4797.25s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.22'

Starting Epoch 23: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 23: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 23: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 23: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[23 of 125]: [Training] ce = 0.19341032 * 32258; errs = 8.475% * 32258; totalSamplesSeen = 741934; learningRatePerSample = 0.00390625; epochTime=4831.08s
Finished Epoch[23 of 125]: [Training] ce = 0.19341032 * 32258; errs = 8.475% * 32258; totalSamplesSeen = 741934; learningRatePerSample = 0.00390625; epochTime=4831.08s
Finished Epoch[23 of 125]: [Training] ce = 0.19341032 * 32258; errs = 8.475% * 32258; totalSamplesSeen = 741934; learningRatePerSample = 0.00390625; epochTime=4831.08s
Finished Epoch[23 of 125]: [Training] ce = 0.19341032 * 32258; errs = 8.475% * 32258; totalSamplesSeen = 741934; learningRatePerSample = 0.00390625; epochTime=4831.08s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.23'

Starting Epoch 24: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 24: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 24: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 24: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[24 of 125]: [Training] ce = 0.19504088 * 32258; errs = 8.599% * 32258; totalSamplesSeen = 774192; learningRatePerSample = 0.00390625; epochTime=4809.35s
Finished Epoch[24 of 125]: [Training] ce = 0.19504088 * 32258; errs = 8.599% * 32258; totalSamplesSeen = 774192; learningRatePerSample = 0.00390625; epochTime=4809.35s
Finished Epoch[24 of 125]: [Training] ce = 0.19504088 * 32258; errs = 8.599% * 32258; totalSamplesSeen = 774192; learningRatePerSample = 0.00390625; epochTime=4809.36s
Finished Epoch[24 of 125]: [Training] ce = 0.19504088 * 32258; errs = 8.599% * 32258; totalSamplesSeen = 774192; learningRatePerSample = 0.00390625; epochTime=4809.36s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.24'

Starting Epoch 25: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 25: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 25: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 25: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[25 of 125]: [Training] ce = 0.18986559 * 32258; errs = 8.209% * 32258; totalSamplesSeen = 806450; learningRatePerSample = 0.00390625; epochTime=4793.44s
Finished Epoch[25 of 125]: [Training] ce = 0.18986559 * 32258; errs = 8.209% * 32258; totalSamplesSeen = 806450; learningRatePerSample = 0.00390625; epochTime=4793.44s
Finished Epoch[25 of 125]: [Training] ce = 0.18986559 * 32258; errs = 8.209% * 32258; totalSamplesSeen = 806450; learningRatePerSample = 0.00390625; epochTime=4793.44s
Finished Epoch[25 of 125]: [Training] ce = 0.18986559 * 32258; errs = 8.209% * 32258; totalSamplesSeen = 806450; learningRatePerSample = 0.00390625; epochTime=4793.44s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.25'

Starting Epoch 26: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 26: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 26: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 26: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[26 of 125]: [Training] ce = 0.18342956 * 32258; errs = 7.927% * 32258; totalSamplesSeen = 838708; learningRatePerSample = 0.00390625; epochTime=4847.02s
Finished Epoch[26 of 125]: [Training] ce = 0.18342956 * 32258; errs = 7.927% * 32258; totalSamplesSeen = 838708; learningRatePerSample = 0.00390625; epochTime=4847.02s
Finished Epoch[26 of 125]: [Training] ce = 0.18342956 * 32258; errs = 7.927% * 32258; totalSamplesSeen = 838708; learningRatePerSample = 0.00390625; epochTime=4847.02s
Finished Epoch[26 of 125]: [Training] ce = 0.18342956 * 32258; errs = 7.927% * 32258; totalSamplesSeen = 838708; learningRatePerSample = 0.00390625; epochTime=4847.02s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.26'

Starting Epoch 27: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 27: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 27: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 27: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[27 of 125]: [Training] ce = 0.17630114 * 32258; errs = 7.731% * 32258; totalSamplesSeen = 870966; learningRatePerSample = 0.00390625; epochTime=4816.07s
Finished Epoch[27 of 125]: [Training] ce = 0.17630114 * 32258; errs = 7.731% * 32258; totalSamplesSeen = 870966; learningRatePerSample = 0.00390625; epochTime=4816.07s
Finished Epoch[27 of 125]: [Training] ce = 0.17630114 * 32258; errs = 7.731% * 32258; totalSamplesSeen = 870966; learningRatePerSample = 0.00390625; epochTime=4816.07s
Finished Epoch[27 of 125]: [Training] ce = 0.17630114 * 32258; errs = 7.731% * 32258; totalSamplesSeen = 870966; learningRatePerSample = 0.00390625; epochTime=4816.07s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.27'

Starting Epoch 28: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 28: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 28: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 28: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[28 of 125]: [Training] ce = 0.17463908 * 32258; errs = 7.471% * 32258; totalSamplesSeen = 903224; learningRatePerSample = 0.00390625; epochTime=4804.43s
Finished Epoch[28 of 125]: [Training] ce = 0.17463908 * 32258; errs = 7.471% * 32258; totalSamplesSeen = 903224; learningRatePerSample = 0.00390625; epochTime=4804.44s
Finished Epoch[28 of 125]: [Training] ce = 0.17463908 * 32258; errs = 7.471% * 32258; totalSamplesSeen = 903224; learningRatePerSample = 0.00390625; epochTime=4804.44s
Finished Epoch[28 of 125]: [Training] ce = 0.17463908 * 32258; errs = 7.471% * 32258; totalSamplesSeen = 903224; learningRatePerSample = 0.00390625; epochTime=4804.44s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.28'

Starting Epoch 29: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 29: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 29: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 29: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[29 of 125]: [Training] ce = 0.16733517 * 32258; errs = 7.037% * 32258; totalSamplesSeen = 935482; learningRatePerSample = 0.00390625; epochTime=4845.79s
Finished Epoch[29 of 125]: [Training] ce = 0.16733517 * 32258; errs = 7.037% * 32258; totalSamplesSeen = 935482; learningRatePerSample = 0.00390625; epochTime=4845.79s
Finished Epoch[29 of 125]: [Training] ce = 0.16733517 * 32258; errs = 7.037% * 32258; totalSamplesSeen = 935482; learningRatePerSample = 0.00390625; epochTime=4845.79s
Finished Epoch[29 of 125]: [Training] ce = 0.16733517 * 32258; errs = 7.037% * 32258; totalSamplesSeen = 935482; learningRatePerSample = 0.00390625; epochTime=4845.79s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.29'

Starting Epoch 30: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 30: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 30: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 30: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[30 of 125]: [Training] ce = 0.16187402 * 32258; errs = 6.941% * 32258; totalSamplesSeen = 967740; learningRatePerSample = 0.00390625; epochTime=4761.34s
Finished Epoch[30 of 125]: [Training] ce = 0.16187402 * 32258; errs = 6.941% * 32258; totalSamplesSeen = 967740; learningRatePerSample = 0.00390625; epochTime=4761.34s
Finished Epoch[30 of 125]: [Training] ce = 0.16187402 * 32258; errs = 6.941% * 32258; totalSamplesSeen = 967740; learningRatePerSample = 0.00390625; epochTime=4761.34s
Finished Epoch[30 of 125]: [Training] ce = 0.16187402 * 32258; errs = 6.941% * 32258; totalSamplesSeen = 967740; learningRatePerSample = 0.00390625; epochTime=4761.34s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.30'

Starting Epoch 31: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 31: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 31: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 31: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[31 of 125]: [Training] ce = 0.12354798 * 32258; errs = 4.802% * 32258; totalSamplesSeen = 999998; learningRatePerSample = 0.00039062501; epochTime=4799.03s
Finished Epoch[31 of 125]: [Training] ce = 0.12354798 * 32258; errs = 4.802% * 32258; totalSamplesSeen = 999998; learningRatePerSample = 0.00039062501; epochTime=4799.03s
Finished Epoch[31 of 125]: [Training] ce = 0.12354798 * 32258; errs = 4.802% * 32258; totalSamplesSeen = 999998; learningRatePerSample = 0.00039062501; epochTime=4799.03s
Finished Epoch[31 of 125]: [Training] ce = 0.12354798 * 32258; errs = 4.802% * 32258; totalSamplesSeen = 999998; learningRatePerSample = 0.00039062501; epochTime=4799.03s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.31'

Starting Epoch 32: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 32: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 32: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 32: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[32 of 125]: [Training] ce = 0.07645797 * 32258; errs = 2.985% * 32258; totalSamplesSeen = 1032256; learningRatePerSample = 0.00039062501; epochTime=4816.37s
Finished Epoch[32 of 125]: [Training] ce = 0.07645797 * 32258; errs = 2.985% * 32258; totalSamplesSeen = 1032256; learningRatePerSample = 0.00039062501; epochTime=4816.37s
Finished Epoch[32 of 125]: [Training] ce = 0.07645797 * 32258; errs = 2.985% * 32258; totalSamplesSeen = 1032256; learningRatePerSample = 0.00039062501; epochTime=4816.37s
Finished Epoch[32 of 125]: [Training] ce = 0.07645797 * 32258; errs = 2.985% * 32258; totalSamplesSeen = 1032256; learningRatePerSample = 0.00039062501; epochTime=4816.37s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.32'

Starting Epoch 33: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 33: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 33: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 33: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[33 of 125]: [Training] ce = 0.06143568 * 32258; errs = 2.406% * 32258; totalSamplesSeen = 1064514; learningRatePerSample = 0.00039062501; epochTime=4789.83s
Finished Epoch[33 of 125]: [Training] ce = 0.06143568 * 32258; errs = 2.406% * 32258; totalSamplesSeen = 1064514; learningRatePerSample = 0.00039062501; epochTime=4789.83s
Finished Epoch[33 of 125]: [Training] ce = 0.06143568 * 32258; errs = 2.406% * 32258; totalSamplesSeen = 1064514; learningRatePerSample = 0.00039062501; epochTime=4789.83s
Finished Epoch[33 of 125]: [Training] ce = 0.06143568 * 32258; errs = 2.406% * 32258; totalSamplesSeen = 1064514; learningRatePerSample = 0.00039062501; epochTime=4789.83s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.33'

Starting Epoch 34: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 34: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 34: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 34: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[34 of 125]: [Training] ce = 0.05603365 * 32258; errs = 2.083% * 32258; totalSamplesSeen = 1096772; learningRatePerSample = 0.00039062501; epochTime=4883.31s
Finished Epoch[34 of 125]: [Training] ce = 0.05603365 * 32258; errs = 2.083% * 32258; totalSamplesSeen = 1096772; learningRatePerSample = 0.00039062501; epochTime=4883.31s
Finished Epoch[34 of 125]: [Training] ce = 0.05603365 * 32258; errs = 2.083% * 32258; totalSamplesSeen = 1096772; learningRatePerSample = 0.00039062501; epochTime=4883.31s
Finished Epoch[34 of 125]: [Training] ce = 0.05603365 * 32258; errs = 2.083% * 32258; totalSamplesSeen = 1096772; learningRatePerSample = 0.00039062501; epochTime=4883.31s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.34'

Starting Epoch 35: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 35: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 35: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 35: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[35 of 125]: [Training] ce = 0.04889416 * 32258; errs = 1.866% * 32258; totalSamplesSeen = 1129030; learningRatePerSample = 0.00039062501; epochTime=4852.6s
Finished Epoch[35 of 125]: [Training] ce = 0.04889416 * 32258; errs = 1.866% * 32258; totalSamplesSeen = 1129030; learningRatePerSample = 0.00039062501; epochTime=4852.6s
Finished Epoch[35 of 125]: [Training] ce = 0.04889416 * 32258; errs = 1.866% * 32258; totalSamplesSeen = 1129030; learningRatePerSample = 0.00039062501; epochTime=4852.6s
Finished Epoch[35 of 125]: [Training] ce = 0.04889416 * 32258; errs = 1.866% * 32258; totalSamplesSeen = 1129030; learningRatePerSample = 0.00039062501; epochTime=4852.6s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/OutputRegResNet/Models/ConvNetEnergyReg.35'

Starting Epoch 36: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 36: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 36: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 36: learning rate per sample = 0.000391  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
=>> PBS: job killed: walltime 86363 exceeded limit 86340
