CNTK 2.0rc2 (HEAD f19045, Apr 21 2017 07:25:22) on tg031 at 2017/05/24 11:19:17

cntk/cntk/bin/cntk  configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConUDResNet34.cntk
CNTK 2.0rc2 (HEAD f19045, Apr 21 2017 07:25:22) on tg031 at 2017/05/24 11:19:17

cntk/cntk/bin/cntk  configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConUDResNet34.cntk
CNTK 2.0rc2 (HEAD f19045, Apr 21 2017 07:25:22) on tg031 at 2017/05/24 11:19:17

cntk/cntk/bin/cntkCNTK 2.0rc2 (HEAD f19045,   configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConUDResNet34.cntk
Apr 21 2017 07:25:22) on tg031 at 2017/05/24 11:19:17

cntk/cntk/bin/cntk  configFile=/home/woody/capn/mppi027h/km3net/Configs/4dConUDResNet34.cntk
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (1) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (3) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (2) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
requestnodes [MPIWrapperMpi]: using 4 out of 4 MPI nodes on a single host (4 requested); we (0) are in (participating)
ping [mpihelper]: 4 nodes pinging each other
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConUDResNet34.cntk:command=Train
configparameters: 4dConUDResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConUDResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConUDResNet34.cntk:deviceId=auto
configparameters: 4dConUDResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 32
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConUDResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain
configparameters: 4dConUDResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet
configparameters: 4dConUDResNet34.cntk:parallelTrain=true
configparameters: 4dConUDResNet34.cntk:precision=float
configparameters: 4dConUDResNet34.cntk:profilerEnabled=true
configparameters: 4dConUDResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConUDResNet34.cntk:traceLevel=1
configparameters: 4dConUDResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:4), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 30000
        minibatchSize = 256
        maxEpochs = 80
        learningRatesPerMB = 1*20: 0.1*20: 0.01*20: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################


Creating virgin network.
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8001 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConUDResNet34.cntk:command=Train
configparameters: 4dConUDResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConUDResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConUDResNet34.cntk:deviceId=auto
configparameters: 4dConUDResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 32
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConUDResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain
configparameters: 4dConUDResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet
configparameters: 4dConUDResNet34.cntk:parallelTrain=true
configparameters: 4dConUDResNet34.cntk:precision=float
configparameters: 4dConUDResNet34.cntk:profilerEnabled=true
configparameters: 4dConUDResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConUDResNet34.cntk:traceLevel=1
configparameters: 4dConUDResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:4), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 30000
        minibatchSize = 256
        maxEpochs = 80
        learningRatesPerMB = 1*20: 0.1*20: 0.01*20: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################

LockDevice: Failed to lock GPU 0 for exclusive use.

Creating virgin network.
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7997 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8001 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConUDResNet34.cntk:command=Train
configparameters: 4dConUDResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConUDResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConUDResNet34.cntk:deviceId=auto
configparameters: 4dConUDResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 32
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConUDResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain
configparameters: 4dConUDResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet
configparameters: 4dConUDResNet34.cntk:parallelTrain=true
configparameters: 4dConUDResNet34.cntk:precision=float
configparameters: 4dConUDResNet34.cntk:profilerEnabled=true
configparameters: 4dConUDResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConUDResNet34.cntk:traceLevel=1
configparameters: 4dConUDResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:4), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 30000
        minibatchSize = 256
        maxEpochs = 80
        learningRatesPerMB = 1*20: 0.1*20: 0.01*20: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################

LockDevice: Failed to lock GPU 0 for exclusive use.
LockDevice: Failed to lock GPU 1 for exclusive use.

Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[2 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[2 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[2 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 5 x 5 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 5 x 5 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.

Post-processing network...

4 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()
	z = Plus()
-------------------------------------------------------------------
Build info: 

		Built time: Apr 21 2017 07:23:49
		Last modified date: Thu Apr 20 22:01:43 2017
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		With ASGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-8.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: f190457aecbfe07c3fe27c89f36108bc2488727b
		Built by Source/CNTK/buildinfo.h$$0 on ef88a481c30f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
		MPI distribution: Open MPI
		MPI version: 1.10.3
-------------------------------------------------------------------
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.

Validating network. 348 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> model.arrayOfFunctions[9].W = LearnableParameter() :  -> [2 x 0]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [5 x 5 x 5 x 5 x 0 x 8]
Validating --> features = InputValue() :  -> [11 x 11 x 18 x 50 x 1 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 5 x 5 x 1 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 5 x 5 x 1 x 8] <- heNormal(seed=34, init dims=[5000 x 625], range=0.056569(0.056569*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x._.x.c = Convolution (model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, features) : [5 x 5 x 5 x 5 x 1 x 8], [11 x 11 x 18 x 50 x 1 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x._.x.c, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=33, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=32, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=31, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=30, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 32] as heNormal later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=29, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=28, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 16].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 16] <- heNormal(seed=27, init dims=[1296 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=26, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 16]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 8 x 16].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 8 x 16] <- heNormal(seed=35, init dims=[16 x 8], range=0.500000(0.500000*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.x.x.s.x.c, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.s) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=25, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=24, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.x.b, __z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=23, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=22, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 5 x 5 x 0 x 8] as heNormal later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=21, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=20, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 32] <- heNormal(seed=19, init dims=[2592 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=18, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 32]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 16 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 16 x 32] <- heNormal(seed=36, init dims=[32 x 16], range=0.353553(0.353553*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.s.arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.s.x.c, z.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.b, z.x.x.x.x.x.s) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=17, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.

Post-processing network...

4 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()
	z = Plus()
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=16, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=15, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
-------------------------------------------------------------------
GPU info:

		Device[0]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7985 MB
		Device[1]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7991 MB
		Device[2]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 7991 MB
		Device[3]: cores = 3840; computeCapability = 6.1; type = "GeForce GTX 1080"; total memory = 8114 MB; free memory = 8112 MB
-------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 4dConUDResNet34.cntk:command=Train
configparameters: 4dConUDResNet34.cntk:configDir=/home/woody/capn/mppi027h/km3net/Configs
configparameters: 4dConUDResNet34.cntk:dataDir=/home/woody/capn/mppi027h/km3net/Data/numuUpDown
configparameters: 4dConUDResNet34.cntk:deviceId=auto
configparameters: 4dConUDResNet34.cntk:Eval={
    action = "eval"
    minibatchSize = 32
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

configparameters: 4dConUDResNet34.cntk:modelPath=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain
configparameters: 4dConUDResNet34.cntk:outputDir=/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet
configparameters: 4dConUDResNet34.cntk:parallelTrain=true
configparameters: 4dConUDResNet34.cntk:precision=float
configparameters: 4dConUDResNet34.cntk:profilerEnabled=true
configparameters: 4dConUDResNet34.cntk:rootDir=/home/woody/capn/mppi027h/km3net
configparameters: 4dConUDResNet34.cntk:traceLevel=1
configparameters: 4dConUDResNet34.cntk:Train={
    action = "train"
    BrainScriptNetworkBuilder = {
        include "/home/woody/capn/mppi027h/km3net/Configs/Macros.bs"
imageShape  = 11:11:18:50:1                  
labelDim    = 2                      		 
		cMap        = 8:16:32:64
        numLayers   = 3:3:5:2
        bnTimeConst = 4096
        model = Sequential(
            ConvBNReLULayer {cMap[0], (5:5:5:5), (1:1:1:1), bnTimeConst} :
            ResNetBasicStack {numLayers[0], cMap[0], bnTimeConst} :
            ResNetBasicInc {cMap[1], (2:2:2:2), bnTimeConst} :
            ResNetBasicStack {numLayers[1], cMap[1], bnTimeConst} :
            ResNetBasicInc {cMap[2], (2:2:3:4), bnTimeConst} :
            ResNetBasicStack {numLayers[2], cMap[2], bnTimeConst} :
            ResNetBasicInc {cMap[3], (1:1:1:2), bnTimeConst} :
            ResNetBasicStack {numLayers[3], cMap[3], bnTimeConst} :
            AveragePoolingLayer {(3:3:3:3), stride = 1} :
            LinearLayer {labelDim, init = 'uniform'}
        )
        features    = Input {imageShape}
        labels      = Input {labelDim}
        z           = model (features)
        ce          = CrossEntropyWithSoftmax   (labels, z)
        errs        = ClassificationError       (labels, z)
        top5Errs    = ClassificationError       (labels, z, topN = 5)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
evaluationNodes = (errs) 
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 30000
        minibatchSize = 256
        maxEpochs = 80
        learningRatesPerMB = 1*20: 0.1*20: 0.01*20: 0.001
        momentumPerMB = 0.9
        gradUpdateType = "None"
        L2RegWeight = 0.0001
        dropoutRate = 0
        numMBsToShowResult = 500
        disableRegInBatchNormalization = true
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
	}
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/woody/capn/mppi027h/km3net/Data/numuUpDown/TrainData.txt"
        randomize = true
keepDataInMemory = false     
        input = {
            features = { dim = 108900 ; format = "dense" }
            labels   = { dim = 2 ;   format = "dense" }
        }
    }
}

Commands: Train
precision = "float"
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.

Validating network. 348 nodes to process in pass 1.

Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> labels = InputValue() :  -> [2 x *]
Validating --> model.arrayOfFunctions[9].W = LearnableParameter() :  -> [2 x 0]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]

##############################################################################
#                                                                            #
# Train command (train action)                                               #
#                                                                            #
##############################################################################

Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=14, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> z.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [5 x 5 x 5 x 5 x 0 x 8]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> features = InputValue() :  -> [11 x 11 x 18 x 50 x 1 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 5 x 5 x 1 x 8].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 5 x 5 x 1 x 8] <- heNormal(seed=34, init dims=[5000 x 625], range=0.056569(0.056569*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x._.x.c = Convolution (model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, features) : [5 x 5 x 5 x 5 x 1 x 8], [11 x 11 x 18 x 50 x 1 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x._.x.c, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=33, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 32] as heNormal later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=13, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=32, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Validating --> z.x.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=31, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=30, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=12, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=29, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Validating --> __z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=28, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 16] <- heNormal(seed=27, init dims=[1296 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=11, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=10, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=26, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.b.x.c, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.p = Plus (z.x.x.x.x.x.b, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Validating --> __z.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 16]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 8 x 16].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 8 x 16] <- heNormal(seed=35, init dims=[16 x 8], range=0.500000(0.500000*1.000000), onCPU=true.
)LockDevice: Failed to lock GPU 1 for exclusive use.
LockDevice: Failed to lock GPU 0 for exclusive use.
LockDevice: Failed to lock GPU 2 for exclusive use.
Validating --> z.x.x.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.x.x.s.x.c, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> __z.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.s) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=25, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=9, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.

Creating virgin network.
Validating --> z.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.b.x._.x.c, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=24, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.x.b, __z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=23, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=8, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.b = BatchNormalization (z.x.x.x.x.b.x.c, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=22, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> z.x.x.x.x.p = Plus (z.x.x.x.x.b, z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 64].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=21, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 64] as heNormal later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=20, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 32] <- heNormal(seed=19, init dims=[2592 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 64] <- heNormal(seed=7, init dims=[5184 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.b.x._.x.c, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.x = RectifiedLinear (_z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=18, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 32]
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 16 x 32].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 16 x 32] <- heNormal(seed=36, init dims=[32 x 16], range=0.353553(0.353553*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.s.arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.s.x.c, z.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.b, z.x.x.x.x.x.s) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].

Post-processing network...
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=17, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]

4 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()
	z = Plus()
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=6, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=16, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.b = BatchNormalization (_z.x.x.x.b.x.c, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 64]
Validating --> z.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 32 x 64].

Validating network. 348 nodes to process in pass 1.

Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 32 x 64] <- heNormal(seed=37, init dims=[64 x 32], range=0.250000(0.250000*1.000000), onCPU=true.
)Validating --> z.x.x.x.s.x.c = Convolution (z.x.x.x.s.arrayOfFunctions[0].W, z.x.x.x.x.r) : [1 x 1 x 1 x 1 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> labels = InputValue() :  -> [2 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[9].W = LearnableParameter() :  -> [2 x 0]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.s = BatchNormalization (z.x.x.x.s.x.c, z.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.p = Plus (_z.x.x.x.b, z.x.x.x.s) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.r = RectifiedLinear (_z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=15, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Validating --> z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [5 x 5 x 5 x 5 x 0 x 8]
Validating --> features = InputValue() :  -> [11 x 11 x 18 x 50 x 1 x *]
Validating --> z.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 5 x 5 x 1 x 8].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=14, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 5 x 5 x 1 x 8] <- heNormal(seed=34, init dims=[5000 x 625], range=0.056569(0.056569*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x._.x.c = Convolution (model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, features) : [5 x 5 x 5 x 5 x 1 x 8], [11 x 11 x 18 x 50 x 1 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x._.x.c, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=33, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=32, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=31, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=13, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=30, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=29, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=28, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=5, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.b.x._.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> __z.x.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 16].
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 16] <- heNormal(seed=27, init dims=[1296 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=12, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.x._ = BatchNormalization (z.x.x.x.b.x._.x.c, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.x = RectifiedLinear (z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=11, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=10, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.b.x.c, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.p = Plus (z.x.x.x.x.x.b, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=26, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 16]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 8 x 16].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 8 x 16] <- heNormal(seed=35, init dims=[16 x 8], range=0.500000(0.500000*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=9, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Validating --> z.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.x.x.s.x.c, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> __z.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.s) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.b.x._.x.c, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=25, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=24, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=8, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Validating --> _z.x.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.x.b, __z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.b = BatchNormalization (z.x.x.x.x.b.x.c, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Validating --> z.x.x.x.x.p = Plus (z.x.x.x.x.b, z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=23, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=22, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 64].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=4, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.b.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=21, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.b = BatchNormalization (z.x.x.x.b.x.c, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.p = Plus (z.x.x.x.b, _z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.r = RectifiedLinear (z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=20, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 32].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 32] <- heNormal(seed=19, init dims=[2592 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=18, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 32]
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 16 x 32].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 64] <- heNormal(seed=7, init dims=[5184 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.b.x._.x.c, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.x = RectifiedLinear (_z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 16 x 32] <- heNormal(seed=36, init dims=[32 x 16], range=0.353553(0.353553*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.s.arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=3, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.x._.x.c = Convolution (z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.s.x.c, z.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.b, z.x.x.x.x.x.s) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b.x._ = BatchNormalization (z.x.x.b.x._.x.c, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.x = RectifiedLinear (z.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=17, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=16, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=6, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=15, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b = BatchNormalization (_z.x.x.x.b.x.c, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 64]
Validating --> z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=14, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 32 x 64].
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 32 x 64] <- heNormal(seed=37, init dims=[64 x 32], range=0.250000(0.250000*1.000000), onCPU=true.
)Validating --> z.x.x.x.s.x.c = Convolution (z.x.x.x.s.arrayOfFunctions[0].W, z.x.x.x.x.r) : [1 x 1 x 1 x 1 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=2, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.b.x.c = Convolution (z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.s = BatchNormalization (z.x.x.x.s.x.c, z.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.p = Plus (_z.x.x.x.b, z.x.x.x.s) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.r = RectifiedLinear (_z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b = BatchNormalization (z.x.x.b.x.c, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.p = Plus (z.x.x.b, z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.r = RectifiedLinear (z.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x = Pooling (z.x.x.r) : [3 x 3 x 3 x 4 x 64 x *] -> [1 x 1 x 1 x 2 x 64 x *]
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) operation: Tensor shape was inferred as [2 x 1 x 1 x 1 x 2 x 64].
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation): Initializing Parameter[2 x 1 x 1 x 1 x 2 x 64] <- uniform(seed=1, init dims=[2 x 128], range=0.050000(0.050000*1.000000), onCPU=true.
)Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[9].W, z.x) : [2 x 1 x 1 x 1 x 2 x 64], [1 x 1 x 1 x 2 x 64 x *] -> [2 x *]
Validating --> model.arrayOfFunctions[9].b = LearnableParameter() :  -> [2]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[9].b) : [2 x *], [2] -> [2 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> errs = ClassificationError (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [2 x *], [2 x *], [1 x 1] -> [1]

Validating network. 127 nodes to process in pass 2.

Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=13, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=12, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=11, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=5, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.b.x._.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=10, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.b.x._ = BatchNormalization (z.x.x.x.b.x._.x.c, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.x = RectifiedLinear (z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.b.x.c, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.p = Plus (z.x.x.x.x.x.b, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=9, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.b.x._.x.c, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=8, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b = BatchNormalization (z.x.x.x.x.b.x.c, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.p = Plus (z.x.x.x.x.b, z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]

Validating network, final pass.

Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 64].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=4, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.b.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.b = BatchNormalization (z.x.x.x.b.x.c, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.p = Plus (z.x.x.x.b, _z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.r = RectifiedLinear (z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 64] <- heNormal(seed=7, init dims=[5184 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.b.x._.x.c, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.x = RectifiedLinear (_z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=6, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.b = BatchNormalization (_z.x.x.x.b.x.c, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 64]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=3, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.b.x._.x.c = Convolution (z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b.x._ = BatchNormalization (z.x.x.b.x._.x.c, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.x = RectifiedLinear (z.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 32 x 64].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 32 x 64] <- heNormal(seed=37, init dims=[64 x 32], range=0.250000(0.250000*1.000000), onCPU=true.
)Validating --> z.x.x.x.s.x.c = Convolution (z.x.x.x.s.arrayOfFunctions[0].W, z.x.x.x.x.r) : [1 x 1 x 1 x 1 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.s = BatchNormalization (z.x.x.x.s.x.c, z.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.p = Plus (_z.x.x.x.b, z.x.x.x.s) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.r = RectifiedLinear (_z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=5, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=2, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.b.x.c = Convolution (z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.x._.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b = BatchNormalization (z.x.x.b.x.c, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.p = Plus (z.x.x.b, z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.x._ = BatchNormalization (z.x.x.x.b.x._.x.c, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.r = RectifiedLinear (z.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.x = RectifiedLinear (z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x = Pooling (z.x.x.r) : [3 x 3 x 3 x 4 x 64 x *] -> [1 x 1 x 1 x 2 x 64 x *]
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) operation: Tensor shape was inferred as [2 x 1 x 1 x 1 x 2 x 64].
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation): Initializing Parameter[2 x 1 x 1 x 1 x 2 x 64] <- uniform(seed=1, init dims=[2 x 128], range=0.050000(0.050000*1.000000), onCPU=true.
)Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[9].W, z.x) : [2 x 1 x 1 x 1 x 2 x 64], [1 x 1 x 1 x 2 x 64 x *] -> [2 x *]
Validating --> model.arrayOfFunctions[9].b = LearnableParameter() :  -> [2]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[9].b) : [2 x *], [2] -> [2 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> errs = ClassificationError (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [2 x *], [2 x *], [1 x 1] -> [1]

Validating network. 127 nodes to process in pass 2.

Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=4, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.b.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.b = BatchNormalization (z.x.x.x.b.x.c, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.p = Plus (z.x.x.x.b, _z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.r = RectifiedLinear (z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].

Validating network, final pass.

Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=3, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.b.x._.x.c = Convolution (z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b.x._ = BatchNormalization (z.x.x.b.x._.x.c, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.x = RectifiedLinear (z.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=2, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.b.x.c = Convolution (z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b = BatchNormalization (z.x.x.b.x.c, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.p = Plus (z.x.x.b, z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.r = RectifiedLinear (z.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x = Pooling (z.x.x.r) : [3 x 3 x 3 x 4 x 64 x *] -> [1 x 1 x 1 x 2 x 64 x *]
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) operation: Tensor shape was inferred as [2 x 1 x 1 x 1 x 2 x 64].
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation): Initializing Parameter[2 x 1 x 1 x 1 x 2 x 64] <- uniform(seed=1, init dims=[2 x 128], range=0.050000(0.050000*1.000000), onCPU=true.
)Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[9].W, z.x) : [2 x 1 x 1 x 1 x 2 x 64], [1 x 1 x 1 x 2 x 64 x *] -> [2 x *]
Validating --> model.arrayOfFunctions[9].b = LearnableParameter() :  -> [2]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[9].b) : [2 x *], [2] -> [2 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> errs = ClassificationError (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [2 x *], [2 x *], [1 x 1] -> [1]

Validating network. 127 nodes to process in pass 2.


Validating network, final pass.

z.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[2 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
z.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Using CNTK batch normalization engine.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Using CNTK batch normalization engine.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 3 x 3 x 3 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 5 x 5 x 0 x 8] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 16] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 32] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[1 x 1 x 1 x 1 x 0 x 64] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Using CNTK batch normalization engine.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.

Post-processing network...

4 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	top5Errs = ClassificationError()
	z = Plus()

Validating network. 348 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> model.arrayOfFunctions[9].W = LearnableParameter() :  -> [2 x 0]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 64]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 32]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 16]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [3 x 3 x 3 x 3 x 0 x 8]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W = LearnableParameter() :  -> [5 x 5 x 5 x 5 x 0 x 8]
Validating --> features = InputValue() :  -> [11 x 11 x 18 x 50 x 1 x *]
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 5 x 5 x 1 x 8].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 5 x 5 x 1 x 8] <- heNormal(seed=34, init dims=[5000 x 625], range=0.056569(0.056569*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x._.x.c = Convolution (model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, features) : [5 x 5 x 5 x 5 x 1 x 8], [11 x 11 x 18 x 50 x 1 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x._.x.c, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=33, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=32, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=31, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=30, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> z.x.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=29, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.x.b.x._) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 8].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 8] <- heNormal(seed=28, init dims=[648 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 8 x 8], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [8 x 1].
Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[8 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [11 x 11 x 18 x 50 x 8 x *], [8 x 1], [8 x 1], [8 x 1], [8 x 1], [1] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.x.r) : [11 x 11 x 18 x 50 x 8 x *], [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Validating --> __z.x.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.x.p) : [11 x 11 x 18 x 50 x 8 x *] -> [11 x 11 x 18 x 50 x 8 x *]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 8 x 16].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 8 x 16] <- heNormal(seed=27, init dims=[1296 x 648], range=0.055556(0.055556*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (__z.x.x.x.x.x.x.x.b.x._.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.x = RectifiedLinear (__z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=26, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> __z.x.x.x.x.x.x.x.b.x.c = Convolution (__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> __z.x.x.x.x.x.x.x.b = BatchNormalization (__z.x.x.x.x.x.x.x.b.x.c, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 16]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 8 x 16].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 8 x 16] <- heNormal(seed=35, init dims=[16 x 8], range=0.500000(0.500000*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 8 x 16], [11 x 11 x 18 x 50 x 8 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.x.x.s.x.c, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.p = Plus (__z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.s) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> __z.x.x.x.x.x.x.x.r = RectifiedLinear (__z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=25, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, __z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=24, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.x.b, __z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=23, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=22, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=21, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.x.b.x._) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 16].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 16] <- heNormal(seed=20, init dims=[1296 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 16 x 16], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [6 x 6 x 9 x 25 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.x.b, _z.x.x.x.x.x.x.x.r) : [6 x 6 x 9 x 25 x 16 x *], [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Validating --> _z.x.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.x.p) : [6 x 6 x 9 x 25 x 16 x *] -> [6 x 6 x 9 x 25 x 16 x *]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 16 x 32].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 16 x 32] <- heNormal(seed=19, init dims=[2592 x 1296], range=0.039284(0.039284*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.x.x.b.x._.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.x = RectifiedLinear (_z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=18, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.x.x.b.x.c = Convolution (_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> _z.x.x.x.x.x.b = BatchNormalization (_z.x.x.x.x.x.b.x.c, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 32]
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 16 x 32].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 16 x 32] <- heNormal(seed=36, init dims=[32 x 16], range=0.353553(0.353553*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.s.x.c = Convolution (z.x.x.x.x.x.s.arrayOfFunctions[0].W, _z.x.x.x.x.x.x.r) : [1 x 1 x 1 x 1 x 16 x 32], [6 x 6 x 9 x 25 x 16 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.s = BatchNormalization (z.x.x.x.x.x.s.x.c, z.x.x.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.p = Plus (_z.x.x.x.x.x.b, z.x.x.x.x.x.s) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> _z.x.x.x.x.x.r = RectifiedLinear (_z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=17, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=16, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.x.b, _z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=15, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=14, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=13, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=12, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.x.b.x.c, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Using CNTK batch normalization engine.
Validating --> z.x.x.x.x.x.x.p = Plus (z.x.x.x.x.x.x.b, z.x.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=11, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.x.b.x._.x.c, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=10, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.x.b = BatchNormalization (z.x.x.x.x.x.b.x.c, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.p = Plus (z.x.x.x.x.x.b, z.x.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=9, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.b.x._.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b.x._ = BatchNormalization (z.x.x.x.x.b.x._.x.c, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.x = RectifiedLinear (z.x.x.x.x.b.x._) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 32].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 32] <- heNormal(seed=8, init dims=[2592 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> z.x.x.x.x.b.x.c = Convolution (z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.x.b.x) : [3 x 3 x 3 x 3 x 32 x 32], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 1.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 1].
Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[32 x 1] <- 0.000000.
Validating --> z.x.x.x.x.b = BatchNormalization (z.x.x.x.x.b.x.c, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 7 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1], [1] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.p = Plus (z.x.x.x.x.b, z.x.x.x.x.x.r) : [3 x 3 x 3 x 7 x 32 x *], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Validating --> z.x.x.x.x.r = RectifiedLinear (z.x.x.x.x.p) : [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 7 x 32 x *]
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 32 x 64].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 32 x 64] <- heNormal(seed=7, init dims=[5184 x 2592], range=0.027778(0.027778*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x._.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.x.r) : [3 x 3 x 3 x 3 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.b.x._ = BatchNormalization (_z.x.x.x.b.x._.x.c, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.x = RectifiedLinear (_z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=6, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> _z.x.x.x.b.x.c = Convolution (_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, _z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> _z.x.x.x.b = BatchNormalization (_z.x.x.x.b.x.c, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[0].W = LearnableParameter() :  -> [1 x 1 x 1 x 1 x 0 x 64]
Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [1 x 1 x 1 x 1 x 32 x 64].
Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[1 x 1 x 1 x 1 x 32 x 64] <- heNormal(seed=37, init dims=[64 x 32], range=0.250000(0.250000*1.000000), onCPU=true.
)Validating --> z.x.x.x.s.x.c = Convolution (z.x.x.x.s.arrayOfFunctions[0].W, z.x.x.x.x.r) : [1 x 1 x 1 x 1 x 32 x 64], [3 x 3 x 3 x 7 x 32 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.s.arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.s.arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.s.arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.s = BatchNormalization (z.x.x.x.s.x.c, z.x.x.x.s.arrayOfFunctions[1].scale, z.x.x.x.s.arrayOfFunctions[1].bias, z.x.x.x.s.arrayOfFunctions[1].runMean, z.x.x.x.s.arrayOfFunctions[1].runVariance, z.x.x.x.s.arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.p = Plus (_z.x.x.x.b, z.x.x.x.s) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> _z.x.x.x.r = RectifiedLinear (_z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=5, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.b.x._.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, _z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.b.x._ = BatchNormalization (z.x.x.x.b.x._.x.c, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.x = RectifiedLinear (z.x.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=4, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.x.b.x.c = Convolution (z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.x.b = BatchNormalization (z.x.x.x.b.x.c, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.p = Plus (z.x.x.x.b, _z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.x.r = RectifiedLinear (z.x.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=3, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.b.x._.x.c = Convolution (z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W, z.x.x.x.r) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b.x._ = BatchNormalization (z.x.x.b.x._.x.c, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.x = RectifiedLinear (z.x.x.b.x._) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 3 x 3 x 3 x 64 x 64].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[3 x 3 x 3 x 3 x 64 x 64] <- heNormal(seed=2, init dims=[5184 x 5184], range=0.019642(0.019642*1.000000), onCPU=true.
)Validating --> z.x.x.b.x.c = Convolution (z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W, z.x.x.b.x) : [3 x 3 x 3 x 3 x 64 x 64], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> z.x.x.b = BatchNormalization (z.x.x.b.x.c, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [3 x 3 x 3 x 4 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.p = Plus (z.x.x.b, z.x.x.x.r) : [3 x 3 x 3 x 4 x 64 x *], [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x.x.r = RectifiedLinear (z.x.x.p) : [3 x 3 x 3 x 4 x 64 x *] -> [3 x 3 x 3 x 4 x 64 x *]
Validating --> z.x = Pooling (z.x.x.r) : [3 x 3 x 3 x 4 x 64 x *] -> [1 x 1 x 1 x 2 x 64 x *]
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) operation: Tensor shape was inferred as [2 x 1 x 1 x 1 x 2 x 64].
Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation): Initializing Parameter[2 x 1 x 1 x 1 x 2 x 64] <- uniform(seed=1, init dims=[2 x 128], range=0.050000(0.050000*1.000000), onCPU=true.
)Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[9].W, z.x) : [2 x 1 x 1 x 1 x 2 x 64], [1 x 1 x 1 x 2 x 64 x *] -> [2 x *]
Validating --> model.arrayOfFunctions[9].b = LearnableParameter() :  -> [2]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[9].b) : [2 x *], [2] -> [2 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> errs = ClassificationError (labels, z) : [2 x *], [2 x *] -> [1]
Validating --> inputs.inputs[2] = LearnableParameter() :  -> [1 x 1]
Validating --> top5Errs = ClassificationError (labels, z, inputs.inputs[2]) : [2 x *], [2 x *], [1 x 1] -> [1]

Validating network. 127 nodes to process in pass 2.

z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.

Validating network, final pass.

Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 1, Output: 11 x 11 x 18 x 50 x 8, Kernel: 5 x 5 x 5 x 5 x 1, Map: 8, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.



Post-processing network complete.

_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.



Post-processing network complete.

z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 11 x 11 x 18 x 50 x 8, Kernel: 3 x 3 x 3 x 3 x 8, Map: 8, Stride: 1 x 1 x 1 x 1 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
__z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.



Post-processing network complete.

__z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 11 x 11 x 18 x 50 x 8, Output: 6 x 6 x 9 x 25 x 16, Kernel: 1 x 1 x 1 x 1 x 8, Map: 16, Stride: 2 x 2 x 2 x 2 x 8, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 6 x 6 x 9 x 25 x 16, Kernel: 3 x 3 x 3 x 3 x 16, Map: 16, Stride: 1 x 1 x 1 x 1 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 6 x 6 x 9 x 25 x 16, Output: 3 x 3 x 3 x 7 x 32, Kernel: 1 x 1 x 1 x 1 x 16, Map: 32, Stride: 2 x 2 x 3 x 4 x 16, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 7 x 32, Kernel: 3 x 3 x 3 x 3 x 32, Map: 32, Stride: 1 x 1 x 1 x 1 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
_z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.s.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 7 x 32, Output: 3 x 3 x 3 x 4 x 64, Kernel: 1 x 1 x 1 x 1 x 32, Map: 64, Stride: 1 x 1 x 1 x 2 x 32, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x._.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x.x.b.x.c: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 3 x 3 x 3 x 4 x 64, Kernel: 3 x 3 x 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 1 x 1 x 64, Sharing: (1, 1, 1, 1, 1), AutoPad: (1, 1, 1, 1, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.
Using CNTK batch normalization engine.
z.x: using reference convolution engine for geometry, could be VERY SLOW: Input: 3 x 3 x 3 x 4 x 64, Output: 1 x 1 x 1 x 2 x 64, Kernel: 3 x 3 x 3 x 3 x 1, Map: 1, Stride: 1 x 1 x 1 x 1 x 1, Sharing: (1, 1, 1, 1, 1), AutoPad: (0, 0, 0, 0, 0), LowerPad: 0 x 0 x 0 x 0 x 0, UpperPad: 0 x 0 x 0 x 0 x 0.



Post-processing network complete.


Model has 348 nodes. Using GPU 0.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError

Model has 348 nodes. Using GPU 1.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError

Model has 348 nodes. Using GPU 2.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.


Allocating matrices for forward and/or backward propagation.


Allocating matrices for forward and/or backward propagation.

Model has 348 nodes. Using GPU 3.

Training criterion:   ce = CrossEntropyWithSoftmax
Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 583 matrices, 313 are shared as 70, and 270 are not shared.

Here are the ones that share memory:
	{ z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] }
	{ __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
Memory Sharing: Out of 583 matrices, 313 are shared as 70, and 270 are not shared.

Here are the ones that share memory:
	{ _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient) }
	{ z.x : [1 x 1 x 1 x 2 x 64 x *]
	  z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z : [2 x *]
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient) }
	{ _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] }
	{ z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x : [1 x 1 x 1 x 2 x 64 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient) }
	{ _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1] (gradient) }
	{ _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient) }
	{ _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ z : [2 x *] (gradient)
	  z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }
	{ z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32] (gradient) }
	{ z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16] (gradient) }
	{ z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1] (gradient) }
	{ _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64] (gradient)
	  _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] }
	{ _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] }

	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient) }
	{ z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient) }
	{ _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16] (gradient) }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] }
	{ z : [2 x *] (gradient)
	  z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z : [2 x *]
	  z.x : [1 x 1 x 1 x 2 x 64 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.PlusArgs[0] : [2 x *]
	  z.PlusArgs[0] : [2 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.PlusArgs[0] : [2 x *]
	  z.PlusArgs[0] : [2 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient) }
	{ z.x : [1 x 1 x 1 x 2 x 64 x *]
	  z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient) }
	{ z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }

Here are the ones that don't share memory:
	{top5Errs : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{labels : [2 x *]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64] (gradient)}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}

	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }
	{ z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}

	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *]	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]}
	{z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{model.arrayOfFunctions[9].b : [2] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}

Memory Sharing: Out of 583 matrices, 313 are shared as 70, and 270 are not shared.

Here are the ones that share memory:
	{ _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64] (gradient)
	  _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] }
	{ _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] }
	{ __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }

	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }

Here are the ones that don't share memory:
	{top5Errs : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{labels : [2 x *]}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64]}
	{inputs.inputs[2] : [1 x 1]}
	{errs : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{model.arrayOfFunctions[9].b : [2]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] }
	{ z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16] (gradient) }
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{ce : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{inputs.inputs[2] : [1 x 1]}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{model.arrayOfFunctions[9].b : [2]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{ z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32]}
	{z.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{errs : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{ce : [1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}

	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient) }
	{ _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.PlusArgs[0] : [2 x *]
	  z.PlusArgs[0] : [2 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient) }
	{ _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{model.arrayOfFunctions[9].b : [2] (gradient)}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{ _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] }
	{ z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{ce : [1] (gradient)}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.s.arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.s.arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}

	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] }
	{ z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}

	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64] (gradient)}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{features : [11 x 11 x 18 x 50 x 1 x *]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}

	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] }
	{ z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z : [2 x *]
	  z.x : [1 x 1 x 1 x 2 x 64 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8]}


	  z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] }
	{ __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }
	{ z : [2 x *] (gradient)
	  z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16]}
	{ce : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}

	  _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ z.x : [1 x 1 x 1 x 2 x 64 x *]
	  z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{features : [11 x 11 x 18 x 50 x 1 x *]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}


	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }

Here are the ones that don't share memory:
	{top5Errs : [1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{labels : [2 x *]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{model.arrayOfFunctions[9].b : [2] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.s.arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{errs : [1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}

Memory Sharing: Out of 583 matrices, 313 are shared as 70, and 270 are not shared.

Here are the ones that share memory:
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}

	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z : [2 x *]
	  z.x : [1 x 1 x 1 x 2 x 64 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}

	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ z.x.x.x.s.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ _z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64] (gradient)
	  _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{features : [11 x 11 x 18 x 50 x 1 x *]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}

	  z.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.s.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] }
	{ z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32] (gradient) }
	{ _z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]	{model.arrayOfFunctions[9].b : [2]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}

	  z.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ z.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}

	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient) }
	{ __z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient) }
	{ _z.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1] (gradient) }
	{ z.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient) }
	{ z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.s.x.c : [6 x 6 x 9 x 25 x 16 x *] }
	{ __z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient) }
	{ z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{ce : [1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}

	  z.x.x.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{ce : [1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]}
	{inputs.inputs[2] : [1 x 1]}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1] (gradient)}


	  _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x : [1 x 1 x 1 x 2 x 64 x *]
	  z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)
	  _z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.PlusArgs[0] : [2 x *]
	  z.PlusArgs[0] : [2 x *] (gradient)
	  z.x.x.b : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.p : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.p : [3 x 3 x 3 x 4 x 64 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ _z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.p : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.x.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] }
	{ z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ z.x.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16] (gradient)
	  __z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  __z.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] }
	{ __z.x.x.x.x.x.x.x.b : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *]
	  __z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient) }
	{ z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ __z.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient)
	  z.x.x.r : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.b : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.r : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  z.x.x.x.x.x.s : [3 x 3 x 3 x 7 x 32 x *]
	  z.x.x.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.b.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *]
	  _z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient) }
	{ _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] }
	{ _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.r : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.b.x._.x.c : [11 x 11 x 18 x 50 x 8 x *] }
	{ __z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.b.x._.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ _z.x.x.x.x.x.x.b.x : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  _z.x.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient) }
	{ z : [2 x *] (gradient)
	  z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient) }
	{ _z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient)
	  z.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.b.x._.x.c : [3 x 3 x 3 x 7 x 32 x *] (gradient) }
	{ __z.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *]
	  __z.x.x.x.x.x.x.x.x.b.x._ : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.b.x.c : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  __z.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient)
	  _z.x.x.x.x.x.x.p : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.r : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  z.x.x.x.b.x._.x.c : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.s : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.x.x.x.x.x.x.b : [11 x 11 x 18 x 50 x 8 x *]
	  z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8] (gradient)
	  z.x.x.x.x.x.x.x.x.x.x.p : [11 x 11 x 18 x 50 x 8 x *] (gradient) }
	{ _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *]
	  _z.x.x.x.b.x._ : [3 x 3 x 3 x 4 x 64 x *] (gradient)
	  z.x.x.x.b.x : [3 x 3 x 3 x 4 x 64 x *]
	  z.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.b.x._ : [3 x 3 x 3 x 7 x 32 x *] (gradient)
	  z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32] (gradient) }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.b.x : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)
	  _z.x.x.x.x.x.r : [3 x 3 x 3 x 7 x 32 x *] }
	{ _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.b.x._ : [6 x 6 x 9 x 25 x 16 x *] (gradient)
	  _z.x.x.x.x.x.x.b.x.c : [6 x 6 x 9 x 25 x 16 x *]
	  _z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16] (gradient) }

Here are the ones that don't share memory:
	{top5Errs : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{labels : [2 x *]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{model.arrayOfFunctions[9].b : [2]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{inputs.inputs[2] : [1 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.x._.x.c : [11 x 11 x 18 x 50 x 8 x *]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 64]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x : [11 x 11 x 18 x 50 x 8 x *]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.x.x.x.b.x : [11 x 11 x 18 x 50 x 8 x *]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{errs : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{ce : [1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 64 x 64] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 32 x 32]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 32]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [64 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{ce : [1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{model.arrayOfFunctions[9].b : [2] (gradient)}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [64 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[1].scale : [32 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{z.x.x.x.s.arrayOfFunctions[1].runMean : [64 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].runVariance : [64 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 16 x 16]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 32 x 64]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 16]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].bias : [64 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 16 x 32]}
	{z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W : [1 x 1 x 1 x 1 x 8 x 16]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1]}
	{model.arrayOfFunctions[9].W : [2 x 1 x 1 x 1 x 2 x 64] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale : [16 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [32 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [32 x 1]}
	{_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [32 x 1]}
	{z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [32 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [8 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runCount : [1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{z.x.x.x.s.arrayOfFunctions[1].scale : [64 x 1]}
	{z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [3 x 3 x 3 x 3 x 8 x 8]}
	{_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [16 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runVariance : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias : [8 x 1]}
	{z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].runVariance : [16 x 1]}
	{__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].runMean : [8 x 1]}
	{features : [11 x 11 x 18 x 50 x 1 x *]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale : [8 x 1]}
	{z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [8 x 1]}
	{model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W : [5 x 5 x 5 x 5 x 1 x 8]}


Training 2975322 parameters in 110 out of 110 parameter tensors and 235 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]

Training 2975322 parameters in 110 	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
out of 110 parameter tensors and 235 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[9].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[9].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]

Training 2975322 parameters in 110 out of 110 parameter tensors and 235 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]

Initializing dataParallelSGD with FP32 aggregation.
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]

Training 2975322 parameters in 110 out of 110 parameter tensors and 235 nodes with gradient:

	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '__z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 16 x 16]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node '_z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 5 x 5 x 1 x 8]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[9].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]

Initializing dataParallelSGD with FP32 aggregation.
	Node 'model.arrayOfFunctions[9].W' (LearnableParameter operation) : [2 x 1 x 1 x 1 x 2 x 64]
	Node 'model.arrayOfFunctions[9].b' (LearnableParameter operation) : [2]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
No PreCompute nodes found, or all already computed. Skipping pre-computation step.
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 64 x 64]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 32 x 64]
	Node 'z.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 16 x 32]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[0].W' (LearnableParameter operation) : [1 x 1 x 1 x 1 x 8 x 16]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.s.arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 32 x 32]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [32 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]

No PreCompute nodes found, or all already computed. Skipping pre-computation step.
Initializing dataParallelSGD with FP32 aggregation.
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[0].arrayOfFunctions[0].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [3 x 3 x 3 x 3 x 8 x 8]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [8 x 1]
	Node 'z.x.x.x.x.x.x.x.x.x.x.b.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [8 x 1]

Initializing dataParallelSGD with FP32 aggregation.
No PreCompute nodes found, or all already computed. Skipping pre-computation step.
No PreCompute nodes found, or all already computed. Skipping pre-computation step.

Starting Epoch 1: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 1: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 1: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 1: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 1 of 80]: [Training] ce = 0.71318192 * 30000; errs = 44.817% * 30000; totalSamplesSeen = 30000; learningRatePerSample = 0.00390625; epochTime=7737.25s
Finished Epoch[ 1 of 80]: [Training] ce = 0.71318192 * 30000; errs = 44.817% * 30000; totalSamplesSeen = 30000; learningRatePerSample = 0.00390625; epochTime=7737.25s
Finished Epoch[ 1 of 80]: [Training] ce = 0.71318192 * 30000; errs = 44.817% * 30000; totalSamplesSeen = 30000; learningRatePerSample = 0.00390625; epochTime=7737.25s
Finished Epoch[ 1 of 80]: [Training] ce = 0.71318192 * 30000; errs = 44.817% * 30000; totalSamplesSeen = 30000; learningRatePerSample = 0.00390625; epochTime=7737.25s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.1'

Starting Epoch 2: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 2: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 2: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 2: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 2 of 80]: [Training] ce = 0.68527042 * 30000; errs = 43.620% * 30000; totalSamplesSeen = 60000; learningRatePerSample = 0.00390625; epochTime=7782.84s
Finished Epoch[ 2 of 80]: [Training] ce = 0.68527042 * 30000; errs = 43.620% * 30000; totalSamplesSeen = 60000; learningRatePerSample = 0.00390625; epochTime=7782.84s
Finished Epoch[ 2 of 80]: [Training] ce = 0.68527042 * 30000; errs = 43.620% * 30000; totalSamplesSeen = 60000; learningRatePerSample = 0.00390625; epochTime=7782.84s
Finished Epoch[ 2 of 80]: [Training] ce = 0.68527042 * 30000; errs = 43.620% * 30000; totalSamplesSeen = 60000; learningRatePerSample = 0.00390625; epochTime=7782.84s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.2'

Starting Epoch 3: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 3: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 3: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 3: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 3 of 80]: [Training] ce = 0.68209595 * 30000; errs = 42.523% * 30000; totalSamplesSeen = 90000; learningRatePerSample = 0.00390625; epochTime=7794.98s
Finished Epoch[ 3 of 80]: [Training] ce = 0.68209595 * 30000; errs = 42.523% * 30000; totalSamplesSeen = 90000; learningRatePerSample = 0.00390625; epochTime=7794.98s
Finished Epoch[ 3 of 80]: [Training] ce = 0.68209595 * 30000; errs = 42.523% * 30000; totalSamplesSeen = 90000; learningRatePerSample = 0.00390625; epochTime=7794.98s
Finished Epoch[ 3 of 80]: [Training] ce = 0.68209595 * 30000; errs = 42.523% * 30000; totalSamplesSeen = 90000; learningRatePerSample = 0.00390625; epochTime=7794.98s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.3'

Starting Epoch 4: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 4: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 4: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 4: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 4 of 80]: [Training] ce = 0.62364094 * 30000; errs = 34.877% * 30000; totalSamplesSeen = 120000; learningRatePerSample = 0.00390625; epochTime=7789.04s
Finished Epoch[ 4 of 80]: [Training] ce = 0.62364094 * 30000; errs = 34.877% * 30000; totalSamplesSeen = 120000; learningRatePerSample = 0.00390625; epochTime=7789.04s
Finished Epoch[ 4 of 80]: [Training] ce = 0.62364094 * 30000; errs = 34.877% * 30000; totalSamplesSeen = 120000; learningRatePerSample = 0.00390625; epochTime=7789.04s
Finished Epoch[ 4 of 80]: [Training] ce = 0.62364094 * 30000; errs = 34.877% * 30000; totalSamplesSeen = 120000; learningRatePerSample = 0.00390625; epochTime=7789.04s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.4'

Starting Epoch 5: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 5: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 5: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 5: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 5 of 80]: [Training] ce = 0.45059789 * 30000; errs = 21.970% * 30000; totalSamplesSeen = 150000; learningRatePerSample = 0.00390625; epochTime=7741.18s
Finished Epoch[ 5 of 80]: [Training] ce = 0.45059789 * 30000; errs = 21.970% * 30000; totalSamplesSeen = 150000; learningRatePerSample = 0.00390625; epochTime=7741.18s
Finished Epoch[ 5 of 80]: [Training] ce = 0.45059789 * 30000; errs = 21.970% * 30000; totalSamplesSeen = 150000; learningRatePerSample = 0.00390625; epochTime=7741.18s
Finished Epoch[ 5 of 80]: [Training] ce = 0.45059789 * 30000; errs = 21.970% * 30000; totalSamplesSeen = 150000; learningRatePerSample = 0.00390625; epochTime=7741.18s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.5'

Starting Epoch 6: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 6: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 6: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 6: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 6 of 80]: [Training] ce = 0.37137764 * 30000; errs = 17.783% * 30000; totalSamplesSeen = 180000; learningRatePerSample = 0.00390625; epochTime=7796.37s
Finished Epoch[ 6 of 80]: [Training] ce = 0.37137764 * 30000; errs = 17.783% * 30000; totalSamplesSeen = 180000; learningRatePerSample = 0.00390625; epochTime=7796.37s
Finished Epoch[ 6 of 80]: [Training] ce = 0.37137764 * 30000; errs = 17.783% * 30000; totalSamplesSeen = 180000; learningRatePerSample = 0.00390625; epochTime=7796.37s
Finished Epoch[ 6 of 80]: [Training] ce = 0.37137764 * 30000; errs = 17.783% * 30000; totalSamplesSeen = 180000; learningRatePerSample = 0.00390625; epochTime=7796.37s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.6'

Starting Epoch 7: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 7: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 7: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 7: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 7 of 80]: [Training] ce = 0.31887704 * 30000; errs = 14.960% * 30000; totalSamplesSeen = 210000; learningRatePerSample = 0.00390625; epochTime=7733.93s
Finished Epoch[ 7 of 80]: [Training] ce = 0.31887704 * 30000; errs = 14.960% * 30000; totalSamplesSeen = 210000; learningRatePerSample = 0.00390625; epochTime=7733.93s
Finished Epoch[ 7 of 80]: [Training] ce = 0.31887704 * 30000; errs = 14.960% * 30000; totalSamplesSeen = 210000; learningRatePerSample = 0.00390625; epochTime=7733.93s
Finished Epoch[ 7 of 80]: [Training] ce = 0.31887704 * 30000; errs = 14.960% * 30000; totalSamplesSeen = 210000; learningRatePerSample = 0.00390625; epochTime=7733.93s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.7'

Starting Epoch 8: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 8: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 8: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 8: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 8 of 80]: [Training] ce = 0.31078589 * 30000; errs = 14.647% * 30000; totalSamplesSeen = 240000; learningRatePerSample = 0.00390625; epochTime=7803.38s
Finished Epoch[ 8 of 80]: [Training] ce = 0.31078589 * 30000; errs = 14.647% * 30000; totalSamplesSeen = 240000; learningRatePerSample = 0.00390625; epochTime=7803.38s
Finished Epoch[ 8 of 80]: [Training] ce = 0.31078589 * 30000; errs = 14.647% * 30000; totalSamplesSeen = 240000; learningRatePerSample = 0.00390625; epochTime=7803.38s
Finished Epoch[ 8 of 80]: [Training] ce = 0.31078589 * 30000; errs = 14.647% * 30000; totalSamplesSeen = 240000; learningRatePerSample = 0.00390625; epochTime=7803.38s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.8'

Starting Epoch 9: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 9: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 9: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 9: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[ 9 of 80]: [Training] ce = 0.28513836 * 30000; errs = 13.310% * 30000; totalSamplesSeen = 270000; learningRatePerSample = 0.00390625; epochTime=7749.56s
Finished Epoch[ 9 of 80]: [Training] ce = 0.28513836 * 30000; errs = 13.310% * 30000; totalSamplesSeen = 270000; learningRatePerSample = 0.00390625; epochTime=7749.56s
Finished Epoch[ 9 of 80]: [Training] ce = 0.28513836 * 30000; errs = 13.310% * 30000; totalSamplesSeen = 270000; learningRatePerSample = 0.00390625; epochTime=7749.56s
Finished Epoch[ 9 of 80]: [Training] ce = 0.28513836 * 30000; errs = 13.310% * 30000; totalSamplesSeen = 270000; learningRatePerSample = 0.00390625; epochTime=7749.56s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.9'

Starting Epoch 10: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 10: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 10: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 10: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[10 of 80]: [Training] ce = 0.28532830 * 30000; errs = 13.100% * 30000; totalSamplesSeen = 300000; learningRatePerSample = 0.00390625; epochTime=7759.64s
Finished Epoch[10 of 80]: [Training] ce = 0.28532830 * 30000; errs = 13.100% * 30000; totalSamplesSeen = 300000; learningRatePerSample = 0.00390625; epochTime=7759.64s
Finished Epoch[10 of 80]: [Training] ce = 0.28532830 * 30000; errs = 13.100% * 30000; totalSamplesSeen = 300000; learningRatePerSample = 0.00390625; epochTime=7759.64s
Finished Epoch[10 of 80]: [Training] ce = 0.28532830 * 30000; errs = 13.100% * 30000; totalSamplesSeen = 300000; learningRatePerSample = 0.00390625; epochTime=7759.64s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.10'

Starting Epoch 11: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 11: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 11: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 11: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
Finished Epoch[11 of 80]: [Training] ce = 0.27422577 * 30000; errs = 12.587% * 30000; totalSamplesSeen = 330000; learningRatePerSample = 0.00390625; epochTime=7859.23s
Finished Epoch[11 of 80]: [Training] ce = 0.27422577 * 30000; errs = 12.587% * 30000; totalSamplesSeen = 330000; learningRatePerSample = 0.00390625; epochTime=7859.23s
Finished Epoch[11 of 80]: [Training] ce = 0.27422577 * 30000; errs = 12.587% * 30000; totalSamplesSeen = 330000; learningRatePerSample = 0.00390625; epochTime=7859.23s
Finished Epoch[11 of 80]: [Training] ce = 0.27422577 * 30000; errs = 12.587% * 30000; totalSamplesSeen = 330000; learningRatePerSample = 0.00390625; epochTime=7859.23s
SGD: Saving checkpoint model '/home/woody/capn/mppi027h/km3net/Output/OutputRegResNet/Models/ConvNetEnergyRegOnTrain.11'

Starting Epoch 12: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 12: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 12: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting Epoch 12: learning rate per sample = 0.003906  effective momentum = 0.900000  momentum as time constant = 2429.8 samples

Starting minibatch loop, DataParallelSGD training (myRank = 2, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 0, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 3, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.

Starting minibatch loop, DataParallelSGD training (myRank = 1, numNodes = 4, numGradientBits = 32), distributed reading is ENABLED.
=>> PBS: job killed: walltime 86356 exceeded limit 86340
